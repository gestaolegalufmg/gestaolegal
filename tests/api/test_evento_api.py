from io import BytesIO
from typing import Any

from flask.testing import FlaskClient


def test_create_evento_without_file(
    client: FlaskClient,
    auth_headers: dict[str, str],
    sample_caso_data: dict[str, Any],
) -> None:
    """Test evento creation with multipart/form-data but no file"""
    # First create a caso
    caso_response = client.post(
        "/api/caso/", json=sample_caso_data, headers=auth_headers
    )
    assert caso_response.status_code == 200
    assert caso_response.json is not None
    caso_id = caso_response.json["id"]

    # Create evento without file using multipart/form-data
    evento_data = {
        "tipo": "Audiência",
        "data_evento": "2024-06-20",
        "descricao": "Audiência de conciliação",
        "status": "true",
    }

    response = client.post(
        f"/api/caso/{caso_id}/eventos",
        data=evento_data,
        headers=auth_headers,
        content_type="multipart/form-data",
    )

    assert response.status_code == 200
    data = response.json
    assert data is not None
    assert data["tipo"] == "Audiência"
    assert data["descricao"] == "Audiência de conciliação"
    assert "data_evento" in data
    assert "2024" in data["data_evento"]


def test_create_evento_with_file(
    client: FlaskClient,
    auth_headers: dict[str, str],
    sample_caso_data: dict[str, Any],
) -> None:
    """Test evento creation with file upload"""
    caso_response = client.post(
        "/api/caso/", json=sample_caso_data, headers=auth_headers
    )
    assert caso_response.status_code == 200
    assert caso_response.json is not None
    caso_id = caso_response.json["id"]

    # Create evento with file
    file_content = b"Este eh um arquivo de teste para evento"
    evento_data = {
        "tipo": "Juntada de Documentos",
        "data_evento": "2024-07-15",
        "descricao": "Juntada de procuração",
        "status": "true",
        "arquivo": (BytesIO(file_content), "procuracao.pdf"),
    }

    response = client.post(
        f"/api/caso/{caso_id}/eventos",
        data=evento_data,
        headers=auth_headers,
        content_type="multipart/form-data",
    )

    assert response.status_code == 200
    data = response.json
    assert data is not None
    assert data["tipo"] == "Juntada de Documentos"
    assert data["descricao"] == "Juntada de procuração"
    assert data["arquivo"] is not None
    assert "procuracao.pdf" in data["arquivo"]


def test_create_evento_with_num_evento(
    client: FlaskClient,
    auth_headers: dict[str, str],
    sample_caso_data: dict[str, Any],
) -> None:
    """Test evento creation - num_evento is auto-generated by backend"""
    caso_response = client.post(
        "/api/caso/", json=sample_caso_data, headers=auth_headers
    )
    assert caso_response.status_code == 200
    assert caso_response.json is not None
    caso_id = caso_response.json["id"]

    evento_data = {"tipo": "Petição", "data_evento": "2024-08-10", "status": "true"}

    response = client.post(
        f"/api/caso/{caso_id}/eventos",
        data=evento_data,
        headers=auth_headers,
        content_type="multipart/form-data",
    )

    assert response.status_code == 200
    data = response.json
    assert data is not None
    # num_evento is auto-generated by backend based on count
    assert data["num_evento"] == 1


def test_create_evento_with_usuario_responsavel(
    client: FlaskClient,
    auth_headers: dict[str, str],
    sample_caso_data: dict[str, Any],
) -> None:
    """Test evento creation with id_usuario_responsavel"""
    caso_response = client.post(
        "/api/caso/", json=sample_caso_data, headers=auth_headers
    )
    assert caso_response.status_code == 200
    assert caso_response.json is not None
    caso_id = caso_response.json["id"]

    evento_data = {
        "tipo": "Tarefa",
        "data_evento": "2024-09-05",
        "descricao": "Revisar petição inicial",
        "id_usuario_responsavel": "1",
        "status": "true",
    }

    response = client.post(
        f"/api/caso/{caso_id}/eventos",
        data=evento_data,
        headers=auth_headers,
        content_type="multipart/form-data",
    )

    assert response.status_code == 200
    data = response.json
    assert data is not None
    assert data["id_usuario_responsavel"] == 1


def test_update_evento_without_file_change(
    client: FlaskClient,
    auth_headers: dict[str, str],
    sample_caso_data: dict[str, Any],
) -> None:
    """Test evento update without changing the file"""
    caso_response = client.post(
        "/api/caso/", json=sample_caso_data, headers=auth_headers
    )
    assert caso_response.status_code == 200
    assert caso_response.json is not None
    caso_id = caso_response.json["id"]

    # Create evento
    create_data = {
        "tipo": "Audiência",
        "data_evento": "2024-10-01",
        "descricao": "Audiência inicial",
        "status": "true",
    }

    create_response = client.post(
        f"/api/caso/{caso_id}/eventos",
        data=create_data,
        headers=auth_headers,
        content_type="multipart/form-data",
    )
    assert create_response.status_code == 200
    assert create_response.json is not None
    evento_id = create_response.json["id"]

    # Update only text fields
    update_data = {
        "descricao": "Audiência inicial - ADIADA",
        "data_evento": "2024-10-15",
    }

    response = client.put(
        f"/api/caso/{caso_id}/eventos/{evento_id}",
        data=update_data,
        headers=auth_headers,
        content_type="multipart/form-data",
    )

    assert response.status_code == 200
    data = response.json
    assert data is not None
    assert data["descricao"] == "Audiência inicial - ADIADA"
    assert data["tipo"] == "Audiência"  # Original value preserved


def test_update_evento_with_new_file(
    client: FlaskClient,
    auth_headers: dict[str, str],
    sample_caso_data: dict[str, Any],
) -> None:
    """Test evento update with new file upload"""
    caso_response = client.post(
        "/api/caso/", json=sample_caso_data, headers=auth_headers
    )
    assert caso_response.status_code == 200
    assert caso_response.json is not None
    caso_id = caso_response.json["id"]

    # Create evento with file
    original_file = b"Arquivo original"
    create_data = {
        "tipo": "Juntada",
        "data_evento": "2024-11-01",
        "status": "true",
        "arquivo": (BytesIO(original_file), "original.pdf"),
    }

    create_response = client.post(
        f"/api/caso/{caso_id}/eventos",
        data=create_data,
        headers=auth_headers,
        content_type="multipart/form-data",
    )
    assert create_response.status_code == 200
    assert create_response.json is not None
    evento_id = create_response.json["id"]

    # Update with new file
    new_file = b"Arquivo atualizado"
    update_data = {"arquivo": (BytesIO(new_file), "atualizado.pdf")}

    response = client.put(
        f"/api/caso/{caso_id}/eventos/{evento_id}",
        data=update_data,
        headers=auth_headers,
        content_type="multipart/form-data",
    )

    assert response.status_code == 200
    data = response.json
    assert data is not None
    assert "atualizado.pdf" in data["arquivo"]


def test_evento_date_parsing_from_string(
    client: FlaskClient,
    auth_headers: dict[str, str],
    sample_caso_data: dict[str, Any],
) -> None:
    """Test that data_evento is parsed correctly from ISO string"""
    caso_response = client.post(
        "/api/caso/", json=sample_caso_data, headers=auth_headers
    )
    assert caso_response.status_code == 200
    assert caso_response.json is not None
    caso_id = caso_response.json["id"]

    evento_data = {
        "tipo": "Prazo",
        "data_evento": "2024-12-25",
        "descricao": "Prazo para contestação",
        "status": "true",
    }

    response = client.post(
        f"/api/caso/{caso_id}/eventos",
        data=evento_data,
        headers=auth_headers,
        content_type="multipart/form-data",
    )

    assert response.status_code == 200
    data = response.json
    assert data is not None
    # Backend returns dates in HTTP date format (RFC 2822), not ISO
    assert "data_evento" in data
    assert "2024" in data["data_evento"]
    assert "Dec" in data["data_evento"] or "12" in data["data_evento"]


def test_get_evento_by_id(
    client: FlaskClient,
    auth_headers: dict[str, str],
    sample_caso_data: dict[str, Any],
) -> None:
    """Test retrieving a specific evento"""
    caso_response = client.post(
        "/api/caso/", json=sample_caso_data, headers=auth_headers
    )
    assert caso_response.status_code == 200
    assert caso_response.json is not None
    caso_id = caso_response.json["id"]

    # Create evento
    create_data = {
        "tipo": "Sentença",
        "data_evento": "2024-05-30",
        "descricao": "Sentença publicada",
        "status": "true",
    }

    create_response = client.post(
        f"/api/caso/{caso_id}/eventos",
        data=create_data,
        headers=auth_headers,
        content_type="multipart/form-data",
    )
    assert create_response.status_code == 200
    assert create_response.json is not None
    evento_id = create_response.json["id"]

    # Get evento by id
    response = client.get(
        f"/api/caso/{caso_id}/eventos/{evento_id}", headers=auth_headers
    )

    assert response.status_code == 200
    data = response.json
    assert data is not None
    assert data["id"] == evento_id
    assert data["tipo"] == "Sentença"
    assert data["descricao"] == "Sentença publicada"


def test_get_eventos_by_caso(
    client: FlaskClient,
    auth_headers: dict[str, str],
    sample_caso_data: dict[str, Any],
) -> None:
    """Test listing all eventos for a caso"""
    caso_response = client.post(
        "/api/caso/", json=sample_caso_data, headers=auth_headers
    )
    assert caso_response.status_code == 200
    assert caso_response.json is not None
    caso_id = caso_response.json["id"]

    # Create multiple eventos
    for i in range(3):
        evento_data = {
            "tipo": f"Evento {i + 1}",
            "data_evento": "2024-03-15",
            "status": "true",
        }
        client.post(
            f"/api/caso/{caso_id}/eventos",
            data=evento_data,
            headers=auth_headers,
            content_type="multipart/form-data",
        )

    # Get all eventos for caso
    response = client.get(f"/api/caso/{caso_id}/eventos", headers=auth_headers)

    assert response.status_code == 200
    data = response.json
    assert data is not None
    assert isinstance(data, dict)
    assert "items" in data
    assert "total" in data
    assert "page" in data
    assert "per_page" in data
    assert isinstance(data["items"], list)
    assert len(data["items"]) >= 3
    assert data["total"] >= 3


def test_download_evento_file(
    client: FlaskClient,
    auth_headers: dict[str, str],
    sample_caso_data: dict[str, Any],
) -> None:
    """Test downloading an evento file"""
    caso_response = client.post(
        "/api/caso/", json=sample_caso_data, headers=auth_headers
    )
    assert caso_response.status_code == 200
    assert caso_response.json is not None
    caso_id = caso_response.json["id"]

    # Create evento with file
    file_content = b"Conteudo do arquivo para download"
    evento_data = {
        "tipo": "Documento",
        "data_evento": "2024-04-20",
        "status": "true",
        "arquivo": (BytesIO(file_content), "documento.pdf"),
    }

    create_response = client.post(
        f"/api/caso/{caso_id}/eventos",
        data=evento_data,
        headers=auth_headers,
        content_type="multipart/form-data",
    )
    assert create_response.status_code == 200
    assert create_response.json is not None
    evento_id = create_response.json["id"]

    # Download file
    response = client.get(
        f"/api/caso/{caso_id}/eventos/{evento_id}/download", headers=auth_headers
    )

    assert response.status_code == 200
    assert response.data == file_content
